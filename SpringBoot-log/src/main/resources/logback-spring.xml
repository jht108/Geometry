<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!-- property子节点：定义日志的根目录 -->
    <property name="LOG_HOME" value="E:\\log"></property>
    <!-- 定义日志文件名称 -->
    <property name="logName" value="springboot-log"></property>

    <!-- timestap子节点：遵循java.txt.SimpleDateFormat的格式 -->
    <timestamp key="timeName" datePattern="yyyyMMdd'T'HHmmss"/>
    <!--上下文-->
    <contextName>${logName}</contextName>
    <!--
            ConsoleAppender 把日志输出到控制台，有以下子节点：
　　　　　　<encoder>：对日志进行格式化。（具体参数稍后讲解 ）
　　　　　　<target>：字符串System.out(默认)或者System.err
    -->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
　　        <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-4relative [%thread] %-5level %logger{35}=====%msg %n</pattern>
　　　　</encoder>
    </appender>
    <!--
        FileAppender：把日志添加到文件，有以下子节点：
　　　　　　<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
　　　　　　<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
　　　　　　<encoder>：对记录事件进行格式化。（具体参数稍后讲解 ）
　　　　　　<prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->
    <appender name="fileAppender" class="ch.qos.logback.core.FileAppender">
        <file>${LOG_HOME}\${timeName}.log</file>
        <append>true</append>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-4relative [%thread] %-5level %logger{35}------%msg %n</pattern>
        </encoder>
    </appender>
    <!--
        RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
　　　　　　<rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类
　　　　　　      class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"：
                  最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：
　　　　　　<fileNamePattern>：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。
            如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；
            如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。
　　　　　　　<maxHistory>:可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。
        　　　　　　class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点:
            <maxFileSize>:这是活动文件的大小，默认值是10MB。
　　　　　　　-->　
    <appender name="rollingFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
　　　　　　<fileNamePattern>${LOG_HOME}\logFile.%d{yyyy-MM-dd}.log</fileNamePattern>
　　　　　　<maxHistory>30</maxHistory>
           <!-- <maxFileSize>1MB</maxFileSize>-->
　　　　</rollingPolicy>
        <encoder>
　　        <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-4relative [%thread] %-5level %logger{35}______%msg %n</pattern>
　　　　</encoder>
    </appender>
    <root level="DEBUG">
　　　　　<appender-ref ref="consoleAppender" />
　　　　　<appender-ref ref="fileAppender" />
　　　　<!--　<appender-ref ref="rollingFileAppender" />-->
　　</root>
</configuration>